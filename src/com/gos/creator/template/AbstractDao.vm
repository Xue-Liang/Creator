package ${DaoPackageName};
#set($hasAutoIncrement = false)
#set($autoIncrement = "")
#set($counter=0)
#foreach($field in ${Table.getFields()})
       #if(${field.getIsAutoIncrement()}==true)
            #set($hasAutoIncrement=true)
            #set($autoIncrement=${field.getEntityPropertyName()})
       #end
#end
import java.util.List;
import java.sql.ResultSet;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.annotation.Resource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.dao.DataAccessException;
#if($hasAutoIncrement)
import java.sql.Statement;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.GeneratedKeyHolder;
#end
import org.springframework.util.CollectionUtils;
import ${EntityPackageName}.${Table.getEntityClassName()};
import ${DaoPackageName}.SqlBuilder.MySqlBuilder;
/**
基本的增、删、改查工具类,数据表结构发生变化时,直接用代码生成工具成成代码文件，替换此类。
一些业务方面的查询、更新功能可以在子类中修改扩展实现。
@author Xue Liang  on ${Now}
*/
#set($counter = 0)

public abstract class Abstract${Table.getEntityClassName()}Dao{
    @Resource
    protected JdbcTemplate jdbcTemplate;

    protected static final RowMapper<${Table.getEntityClassName()}> mapper = new BeanPropertyRowMapper<${Table.getEntityClassName()}>(${Table.getEntityClassName()}.class);

    protected static final ResultSetExtractor<${Table.getEntityClassName()} > extractor = new ResultSetExtractor<${Table.getEntityClassName()}>() {
        @Override
        public ${Table.getEntityClassName()} extractData(ResultSet rs) throws SQLException, DataAccessException {
            ${Table.getEntityClassName()} row = new ${Table.getEntityClassName()}();
            #foreach($field in ${Table.getFields()})
            row.set${field.getEntityPropertyName()}(rs.get${field.getJavaDataType()}("${field.getTableFieldName()}"));
            #end
            return row;
        }
    };

    private static final String insert = "insert into ${Table.getName()} (#foreach($field in ${Table.getFields()})#if(${field.getIsAutoIncrement()}==true)#else#if($counter>0),#end${field.getTableFieldName()}#set($counter=$counter+1)#end#end)values(#set($counter = 0)#foreach($field in ${Table.getFields()})#if(${field.getIsAutoIncrement()}==true)#else#if($counter>0),#end?#set($counter=$counter+1)#end#end)";
   /**
    插入一条数据
   @author Xue Liang  on ${Now}
   */
    public void insert(${Table.getEntityClassName()}  entity){
        final Object[] values = new Object[] {
        #set($counter=0)
        #foreach($field in ${Table.getFields()})
        #if(${field.getIsAutoIncrement()}==true)
        #set($hasAutoIncrement=true)
        #set($autoIncrement=${field.getEntityPropertyName()})
        #else
        #if($counter>0),#end entity.get${field.getEntityPropertyName()}()
        #set($counter=$counter+1)
        #end
        #end

        };

        PreparedStatementCreator creator = new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                PreparedStatement ps = con.prepareStatement(insert#if($hasAutoIncrement),Statement.RETURN_GENERATED_KEYS#end);
                for (int i = 0; i < values.length; i++) {
                    ps.setObject(i + 1, values[i]);
                }
                return ps;
	        }
        };
   #if($hasAutoIncrement)

        KeyHolder holder = new GeneratedKeyHolder();

        this.jdbcTemplate.update(creator,holder);

        entity.set${autoIncrement}(holder.getKey().intValue());

   #else

        this.jdbcTemplate.update(creator);

   #end

    }
    /**
    修改一条数据
    @author Xue Liang  on ${Now}
    */
    public int update(${Table.getEntityClassName()} entity){
        SqlBuilder sql = MySqlBuilder.create().update("${Table.getName()}");
        #set($counter=0)
        #set($hasAutoIncrement=false)
        #set($autoIncrement="")
        #foreach($field in ${Table.getFields()})
        #if(${field.getIsAutoIncrement()})
        #set($hasAutoIncrement=true)
        #set($autoIncrement=${field.getEntityPropertyName()})
        #else
        #set($isPrimaryKey=false)
        #foreach($p in ${Table.getPrimaryKey().getKey()})
        #if($p.getTableFieldName()==$field.getTableFieldName())
        #set($isPrimaryKey=true)
        #end
        #end
        #if(false==$isPrimaryKey)

        sql.set("${field.getTableFieldName()}",entity.get$field.getEntityPropertyName()());

        #end
        #set($counter=$counter+1)
        #end
        #end

        sql.where(" 1=1 ");

        #set($counter=0)
        #foreach($field in ${Table.getPrimaryKey().getKey()})

        sql.and("${field.getTableFieldName()}").eq(entity.get${field.getEntityPropertyName()}());

        #end

        return this.jdbcTemplate.update(sql.toSql(),sql.getParameters().toArray());
    }

    private static final String delete="delete from ${Table.getName()} where #set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0) and #end${field.getTableFieldName()}=? #set($counter=$counter+1)#end";
    /*
    删除一条数据
    @author Xue Liang  on ${Now}
    */
    public int delete(#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getJavaDataType()} ${field.getEntityFieldName()} #set($counter=$counter+1)#end){
        return this.jdbcTemplate.update(delete,#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getEntityFieldName()} #set($counter=$counter+1)#end);
    }

    #set($counter=0)
    private static final String queryFirst ="select #foreach($field in ${Table.getFields()})#if($counter>0),#end${field.getTableFieldName()}#set($counter=$counter+1)#end from ${Table.getName()}  where #set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0) and #end${field.getTableFieldName()}=? #set($counter=$counter+1)#end";
    /**
    根据主键查询一条数据
    @author Xue Liang  on ${Now}
    */
    public ${Table.getEntityClassName()} queryFirst(#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getJavaDataType()} ${field.getEntityFieldName()} #set($counter=$counter+1)#end){
        Object[]values = new Object[] {
            #set($counter=0)
            #foreach($field in ${Table.getPrimaryKey().getKey()})

            #if($counter>0),#end ${field.getEntityFieldName()}

            #set($counter=$counter+1)
            #end

        };
        ${Table.getEntityClassName()} entity = this.jdbcTemplate.query(queryFirst,values,extractor);
        return entity;
    }
    /**
    自定义的查询,根据sql查询满足条件的记录列表
    @author Xue Liang  on ${Now}
    */
   public List<${Table.getEntityClassName()}> query(SqlBuilder sqlBuilder){
        List<${Table.getEntityClassName()}> entities = this.jdbcTemplate.query(sqlBuilder.toSql(),sqlBuilder.getParameters().toArray(),mapper);
        return entities;
   }
   /**
       自定义的查询,根据sql查询满足条件的记录总数
       @author Xue Liang  on ${Now}
   */
   public int queryTotal(SqlBuilder sqlBuilder){
           return this.jdbcTemplate.queryForObject(sqlBuilder.toSql(),sqlBuilder.getParameters().toArray(),Integer.class);
   }
}