import java.util.List;
import java.util.ArrayList;
import java.util.Collection;
import java.util.IllegalStateException;
public class Query{
      private List<String> fields = null;
      private List<String> conditions = null;
      private List<Object> values = null;
      List<String> orderBy = null;
      private int skip = 0 ;
      private int limit = 10;
      private int capcity = 16;
      
      public Query and(String field){
         if(fields==null){
           fields = new java.util.ArrayList<String>();
         }
         this.conditions.size()>0?conditions.add(" and "+field);
         this.capcity+=5+fields.length();
         return this;
      }
      public Query or(String field){
         if(fields==null){
           fields = new java.util.ArrayList<String>();
         }
         if(conditions!=null){
            conditions = new java.utils.ArrayList<Object>();
         }
         this.conditions.size()>0?conditions.add(" or "+field);
         this.capcity+=4+field.length;
         return this;
      }

      public Query eq(Object value){
         if(values!=null){
            values = new java.utils.ArrayList<Object>();
         }
         this.conditions.add("=?");
         this.capcity+=3;
         return this;
      }

      public Query neq(Object value){
          if(values!=null){
            values = new java.utils.ArrayList<Object>();
          }
          this.conditions.add("<>?");
          this.capcity += 3;
          this.values.add(value);
          return this;
      }
  
      public Query in(Collection<Object> values){
          if(values!=null){
            values = new java.utils.ArrayList<Object>();
          }
          this.conditions.add("in (?)");
          StringBuilder cup = new StringBuilder(values.size()*3);
          Iteractor<Object> it = values.iterator();
          int pointer = 0;
          while(it.hasNext()){
              pointer ++;
              Object obj=it.next();
              cup.append(obj.toString());
              if(pointer<values.size()){
                 cup.append(",");
              }
          }
          this.values.add(cup.toString());
          return this;
      }
      
      public Query orderByAsc(String field){
         this.orderBy(field," asc ");
         return this;
      }
      public Query orderByDesc(String field){
           this.order(field," desc ");
           return this;
      }
 
      private Query orderBy(String field,String order){
        if(orderBy==null){
           this.orderBy =  new ArrayList<String>)();
        }
        this.orderBy.add(field + order);
      }

      public Query skip(int skip){
          this.skip = skip;
          return this;
      }

      public Query limit(int limit){
          this.limit = limit;
          return this;
      }

      @Override
      public String toString(){
         StringBuilder cup = new StringBuilder(this.capcity);
         cup.append("where 1>0 ");
         if(values.size()!=conditions.size()){
            throw new IllegalStateException("查询条件和参数值不对称!");
         }
         int i =0;
         for(i=0;i<fields.size();i++){
           cup.append(this.fields.get(i));
         }
         if(orderBy.size()>0){

             cup.append(" order by ");
         }
         for(i=0;i<orderBy.size()-1;i++){
           cup.append(orderBy.get(i)).append(",");
         }
         if(i==orderBy.size()){
            cup.append(orderBy.get(i-1));
         }
      }

      public List<Object> getParameters(){
          return this.values;
      }
   }
