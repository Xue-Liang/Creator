package ${DaoPackageName};
#set($hasAutoIncrement = false)
#set($autoIncrement = "")
#set($counter=0)
#foreach($field in ${Table.getFields()})
       #if(${field.getIsAutoIncrement()}==true)
            #set($hasAutoIncrement=true)
            #set($autoIncrement=${field.getEntityPropertyName()})
       #end
#end
import java.util.List;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.annotation.Resource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.BeanPropertyRowMapper;

#if($hasAutoIncrement)
import java.sql.Statement;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.jdbc.support.GeneratedKeyHolder;
#end
import org.springframework.util.CollectionUtils;
import ${EntityPackageName}.${Table.getEntityClassName()};
import ${DaoPackageName}.SqlBuilder.MySqlBuilder;
/**


@author Robot.Xue  on ${Now}
*/
#set($counter = 0)
public class ${Table.getEntityClassName()}Dao{
    @Resource
    private JdbcTemplate jdbcTemplate;

    private static final RowMapper<${Table.getEntityClassName()}> mapper = new BeanPropertyRowMapper<${Table.getEntityClassName()}>(${Table.getEntityClassName()}.class);

    private static final String sql_insert = "insert into ${Table.getName()} (#foreach($field in ${Table.getFields()})#if(${field.getIsAutoIncrement()}==true)#else#if($counter>0),#end${field.getTableFieldName()}#set($counter=$counter+1)#end#end)values(#set($counter = 0)#foreach($field in ${Table.getFields()})#if(${field.getIsAutoIncrement()}==true)#else#if($counter>0),#end?#set($counter=$counter+1)#end#end)";
    public void insert(${Table.getEntityClassName()}  entity){
        final Object[] values = new Object[] {
        #set($counter=0)
        #foreach($field in ${Table.getFields()})
        #if(${field.getIsAutoIncrement()}==true)
        #set($hasAutoIncrement=true)
        #set($autoIncrement=${field.getEntityPropertyName()})
        #else
        #if($counter>0),#end entity.get${field.getEntityPropertyName()}()
        #set($counter=$counter+1)
        #end
        #end
        };
#if($hasAutoIncrement==true)
        KeyHolder holder = new GeneratedKeyHolder();
#end
        PreparedStatementCreator creator = new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                PreparedStatement ps = con.prepareStatement(sql_insert#if($hasAutoIncrement),Statement.RETURN_GENERATED_KEYS#end);
                        for (int i = 0; i < values.length; i++) {
                            ps.setObject(i + 1, values[i]);
                        }
                        return ps;
	}
        };
        this.jdbcTemplate.update(creator#if($hasAutoIncrement),holder#end);
        #if($hasAutoIncrement)

        entity.set${autoIncrement}(holder.getKey().intValue());

        #end
    }

    public int update(${Table.getEntityClassName()} entity){
        SqlBuilder sql = MySqlBuilder.create().update("${Table.getName()}");
        #set($counter=0)
        #set($hasAutoIncrement=false)
        #set($autoIncrement="")

                    #foreach($field in ${Table.getFields()})
                         #if(${field.getIsAutoIncrement()})
                               #set($hasAutoIncrement=true)
                               #set($autoIncrement=${field.getEntityPropertyName()})
                         #else
                               #set($isPrimaryKey=false)
                               #foreach($p in ${Table.getPrimaryKey().getKey()})
                                   #if($p.getTableFieldName()==$field.getTableFieldName())
                                       #set($isPrimaryKey=true)
                                   #end
                               #end

                               #if(false==$isPrimaryKey)
                                  sql.set("${field.getTableFieldName()}",entity.get$field.getEntityPropertyName()());
                               #end
                               #set($counter=$counter+1)
                         #end
                    #end
                    sql.where(" 1=1 ");
                    #set($counter=0)
                    #foreach($field in ${Table.getPrimaryKey().getKey()})
                    sql.and("${field.getTableFieldName()}").eq(entity.get${field.getEntityPropertyName()}());
                    #end

        return this.jdbcTemplate.update(sql.toSql(),sql.getParameters().toArray());
    }

    private static final String sql_delete="delete from ${Table.getName()} where #set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0) and #end${field.getTableFieldName()}=? #set($counter=$counter+1)#end";
    public int delete(#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getJavaDataType()} ${field.getEntityFieldName()} #set($counter=$counter+1)#end){
        return this.jdbcTemplate.update(sql_delete,#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getEntityFieldName()} #set($counter=$counter+1)#end);
    }

    #set($counter=0)
    private static final String sql_get${Table.getEntityClassName()} ="select #foreach($field in ${Table.getFields()})#if($counter>0),#end${field.getTableFieldName()}#set($counter=$counter+1)#end from ${Table.getName()}  where #set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0) and #end${field.getTableFieldName()}=? #set($counter=$counter+1)#end";
    public ${Table.getEntityClassName()} queryFirst(#set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getJavaDataType()} ${field.getEntityFieldName()} #set($counter=$counter+1)#end){
        Object[]values = new Object[] {
            #set($counter=0)#foreach($field in ${Table.getPrimaryKey().getKey()}) #if($counter>0),#end ${field.getEntityFieldName()} #set($counter=$counter+1)#end
        };
        List<${Table.getEntityClassName()}> entities = this.jdbcTemplate.query(sql_get${Table.getEntityClassName()},values,mapper);
        return CollectionUtils.isEmpty(entities) ? null : entities.get(0);
    }

   public List<${Table.getEntityClassName()}> query(SqlBuilder sqlBuilder){
        List<${Table.getEntityClassName()}> entities = this.jdbcTemplate.query(sqlBuilder.toSql(),sqlBuilder.getParameters().toArray(),mapper);
        return entities;
   }
}