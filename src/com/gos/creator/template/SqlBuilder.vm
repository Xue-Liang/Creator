package ${DaoPackageName};

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.LinkedList;
/**


@author Robot.Xue on ${Now}
*/
public interface SqlBuilder {
     /**
          @param table  table name
          @param fs  field list
          @param values  sql parameter values
     */
    public SqlBuilder insert(String table,String[]fs,Object[] values);

    public SqlBuilder select(String... fs);

    public SqlBuilder delete();

    public SqlBuilder update(String table);

    public SqlBuilder from(String table);

    public SqlBuilder where(String field);

    public SqlBuilder and(String field);

    public SqlBuilder or(String field);

    public SqlBuilder eq(Object value);

    public SqlBuilder neq(Object value);

    public SqlBuilder gt(Object value);

    public SqlBuilder gte(Object value);

    public SqlBuilder lt(Object value);

    public SqlBuilder lte(Object value);

    public SqlBuilder like(String key);

    public SqlBuilder in(Collection<Object> vs);

    public SqlBuilder orderByAsc(String field);

    public SqlBuilder orderByDesc(String field);

    public SqlBuilder orderBy(String field, String order);

    public SqlBuilder skip(int skip);

    public SqlBuilder limit(int limit);

    public String toSql();

    public List<Object> getParameters();

    public static class MySqlBuilder implements SqlBuilder {
        protected List<String> buff = new LinkedList<String>();
        protected List<Object> values = new LinkedList<>();
        protected int skip = 0;
        protected int limit = 0;
        protected int capcity = 16;
        private static final String comma = ",";
        private static final String qm = "?";
        private static final String lb = "(";
        private static final String rb = ")";
        private static final String space = " ";

        private MySqlBuilder() {

        }

        private MySqlBuilder put(String str) {
            this.buff.add(str);
            this.capcity += str.length();
            return this;
        }

        public static MySqlBuilder create() {
            return new MySqlBuilder();
        }

        private static final String insert = "insert into ";
        @Override
        public SqlBuilder insert(String table,String[]fs,Object[] vs){
            this.put(insert).put(table).put(lb);
            if(fs!=null){
               int i = 0;

               for(;i<fs.length-1;i++){
                  this.put(fs[i]).put(comma); 
               }    
               if(i==fs.length-1){
                    this.put(fs[i]);
               }
               this.put(rb);

               this.put("values").put(lb);

               i =0;
               for(;i<fs.length-1;i++){
                  this.put(qm).put(comma);
               }
               if(i==fs.length-1){
                  this.put(qm);
               }
               this.put(rb);
            }

            for(int i=0;i<vs.length;i++){
               this.values.add(vs[i]);
            }

            return this;
        }

        private static final String del = "delete ";

        public SqlBuilder delete() {
            this.put(del);
            return this;
        }

        private static final String update = "update ";

        public SqlBuilder update(String table) {
            return this.put(update).put(table);
        }

        public SqlBuilder set(String field, Object value) {
            this.put(field);
            this.values.add(value);
            return this;
        }

        private static final String from = " from ";

        public SqlBuilder from(String table) {
            this.put(from);
            return this;
        }

        private static final String where = "where ";

        public SqlBuilder where(String field) {
            this.put(where).put(field);
            return this;
        }

        private static final String select = "select ";

        public SqlBuilder select(String... fs) {
            this.put(select);
            if (fs == null || fs.length < 1) {
                return this;
            }
            int ix = 0;
            for (String f : fs) {
                this.put(f);
                if (ix < fs.length - 1) {
                    this.put(comma);
                }
                ix++;
            }
            if (ix < fs.length) {
                this.put(fs[ix]);
            }
            return this;
        }

        private static final String and = " and ";

        public SqlBuilder and(String field) {
            this.put(and).put(field);
            return this;
        }

        private static final String or = " or ";

        public SqlBuilder or(String field) {
            this.put(or).put(field);
            return this;
        }

        private static final String eq = "=?";

        public SqlBuilder eq(Object value) {
            this.put(eq);
            this.values.add(value);
            return this;
        }

        private static final String neq = "<>?";

        public SqlBuilder neq(Object value) {
            this.put(neq);
            this.values.add(value);
            return this;
        }

        private static final String gt = ">?";

        public SqlBuilder gt(Object value) {
            this.put(gt);
            return this;
        }

        private static final String gte = ">=?";

        public SqlBuilder gte(Object value) {
            this.put(gte);
            return this;
        }

        private static final String lt = "<?";

        public SqlBuilder lt(Object value) {
            if (values == null) {
                values = new java.util.ArrayList<Object>();
            }
            this.put(lt);
            return this;
        }

        private static final String lte = "<=?";

        public SqlBuilder lte(Object value) {
            this.put(lte);
            return this;
        }

        private static final String like = " like ? ";

        public SqlBuilder like(String key) {
            this.put(like);
            this.values.add(key);
            return this;
        }

        private static final String in = " in";

        public SqlBuilder in(Collection<Object> vs) {
            if (vs == null) {
                return this;
            }
            this.put(in).put(lb);
            java.util.Iterator<Object> it = vs.iterator();
            int pointer = 0;
            while (it.hasNext()) {
                Object obj = it.next();
                this.put(qm);
                pointer++;
                if (pointer < vs.size()) {
                    this.put(comma);
                }
                this.values.add(obj);
            }
            this.put(rb);
            return this;
        }

        public SqlBuilder in(SqlBuilder builder) {
            return this.put(in).put(lb).put(builder.toSql()).put(rb);
        }

        public SqlBuilder exists(SqlBuilder builder) {
            return this.put(" exists").put(lb).put(builder.toSql()).put(rb);
        }

        private static final String asc = " asc ";

        public SqlBuilder orderByAsc(String field) {
            return this.orderBy(field, asc);
        }

        private static final String desc = " desc ";

        public SqlBuilder orderByDesc(String field) {
            return this.orderBy(field, desc);
        }
        private static final String orderBy = " order by ";
        public SqlBuilder orderBy(String field, String order) {
            this.put(orderBy).put(field).put(space).put(order);
            return this;
        }

        public SqlBuilder skip(int skip) {
            this.skip = skip;
            return this;
        }

        public SqlBuilder limit(int limit) {
            this.limit = limit;
            return this;
        }

        @Override
        public String toSql() {
            StringBuilder cup = new StringBuilder(this.capcity);
            int i = 0;
            for (String t : this.buff) {
                cup.append(t);
            }
            if (limit > 0) {
                cup.append(" limit ");
                if (skip >= 0) {
                    cup.append(Integer.toString(skip));
                    cup.append(",");
                }
                cup.append(Integer.toString(limit));
            }
            return cup.toString();
        }

        public List<Object> getParameters() {
            return this.values;
        }
    }
}